import java.util.Arrays;
import java.util.Scanner;

public class DiskScheduling {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input the number of requests
        System.out.println("Enter the number of disk requests: ");
        int n = scanner.nextInt();
        
        // Input the request queue
        int[] requests = new int[n];
        System.out.println("Enter the disk requests: ");
        for (int i = 0; i < n; i++) {
            requests[i] = scanner.nextInt();
        }
        
        // Input the initial head position
        System.out.println("Enter the initial head position: ");
        int head = scanner.nextInt();
        
        // Disk size
        System.out.println("Enter the total disk size: ");
        int diskSize = scanner.nextInt();

        // Run and compare the algorithms
        System.out.println("FCFS Total Seek Time: " + fcfs(requests, head));
        System.out.println("SSTF Total Seek Time: " + sstf(requests, head));
        System.out.println("SCAN Total Seek Time: " + scan(requests, head, diskSize));
        System.out.println("C-SCAN Total Seek Time: " + cscan(requests, head, diskSize));
        System.out.println("LOOK Total Seek Time: " + look(requests, head));
        System.out.println("C-LOOK Total Seek Time: " + clook(requests, head));
    }

    // FCFS Disk Scheduling
    public static int fcfs(int[] requests, int head) {
        int seekTime = 0;
        int currentHead = head;

        for (int request : requests) {
            seekTime += Math.abs(currentHead - request);
            currentHead = request;
        }

        return seekTime;
    }

    // SSTF Disk Scheduling
    public static int sstf(int[] requests, int head) {
        int seekTime = 0;
        int currentHead = head;
        boolean[] visited = new boolean[requests.length];

        for (int i = 0; i < requests.length; i++) {
            int closest = -1;
            int minDistance = Integer.MAX_VALUE;

            for (int j = 0; j < requests.length; j++) {
                if (!visited[j] && Math.abs(currentHead - requests[j]) < minDistance) {
                    minDistance = Math.abs(currentHead - requests[j]);
                    closest = j;
                }
            }

            visited[closest] = true;
            seekTime += Math.abs(currentHead - requests[closest]);
            currentHead = requests[closest];
        }

        return seekTime;
    }

    // SCAN Disk Scheduling
    public static int scan(int[] requests, int head, int diskSize) {
        int seekTime = 0;
        int currentHead = head;
        Arrays.sort(requests);
        
        // Find the position of the initial head in the request array
        int i = 0;
        while (i < requests.length && requests[i] < currentHead) {
            i++;
        }

        // Service the requests to the right of the head
        for (int j = i; j < requests.length; j++) {
            seekTime += Math.abs(currentHead - requests[j]);
            currentHead = requests[j];
        }

        // Go to the end of the disk
        seekTime += Math.abs(currentHead - (diskSize - 1));
        currentHead = diskSize - 1;

        // Service the requests to the left of the head
        for (int j = i - 1; j >= 0; j--) {
            seekTime += Math.abs(currentHead - requests[j]);
            currentHead = requests[j];
        }

        return seekTime;
    }

    // C-SCAN Disk Scheduling
    public static int cscan(int[] requests, int head, int diskSize) {
        int seekTime = 0;
        int currentHead = head;
        Arrays.sort(requests);

        // Find the position of the initial head in the request array
        int i = 0;
        while (i < requests.length && requests[i] < currentHead) {
            i++;
        }

        // Service the requests to the right of the head
        for (int j = i; j < requests.length; j++) {
            seekTime += Math.abs(currentHead - requests[j]);
            currentHead = requests[j];
        }

        // Go to the end of the disk
        seekTime += Math.abs(currentHead - (diskSize - 1));
        currentHead = 0;
        seekTime += (diskSize - 1);

        // Service the requests to the left of the head
        for (int j = 0; j < i; j++) {
            seekTime += Math.abs(currentHead - requests[j]);
            currentHead = requests[j];
        }

        return seekTime;
    }

    // LOOK Disk Scheduling
    public static int look(int[] requests, int head) {
        int seekTime = 0;
        int currentHead = head;
        Arrays.sort(requests);

        // Find the position of the initial head in the request array
        int i = 0;
        while (i < requests.length && requests[i] < currentHead) {
            i++;
        }

        // Service the requests to the right of the head
        for (int j = i; j < requests.length; j++) {
            seekTime += Math.abs(currentHead - requests[j]);
            currentHead = requests[j];
        }

        // Service the requests to the left of the head
        for (int j = i - 1; j >= 0; j--) {
            seekTime += Math.abs(currentHead - requests[j]);
            currentHead = requests[j];
        }

        return seekTime;
    }

    // C-LOOK Disk Scheduling
    public static int clook(int[] requests, int head) {
        int seekTime = 0;
        int currentHead = head;
        Arrays.sort(requests);

        // Find the position of the initial head in the request array
        int i = 0;
        while (i < requests.length && requests[i] < currentHead) {
            i++;
        }

        // Service the requests to the right of the head
        for (int j = i; j < requests.length; j++) {
            seekTime += Math.abs(currentHead - requests[j]);
            currentHead = requests[j];
        }

        // Jump to the first request
        seekTime += Math.abs(currentHead - requests[0]);
        currentHead = requests[0];

        // Service the requests to the left of the head
        for (int j = 0; j < i; j++) {
            seekTime += Math.abs(currentHead - requests[j]);
            currentHead = requests[j];
        }

        return seekTime;
    }
}
