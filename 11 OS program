import java.util.Scanner;

public class BankersAlgorithm {
    private int n; // Number of processes
    private int m; // Number of resources
    private int[][] max; // Maximum demand of each process
    private int[][] allocation; // Currently allocated resources
    private int[][] need; // Remaining needs of each process
    private int[] available; // Available resources

    public BankersAlgorithm(int n, int m) {
        this.n = n;
        this.m = m;
        max = new int[n][m];
        allocation = new int[n][m];
        need = new int[n][m];
        available = new int[m];
    }

    public void inputMatrices(Scanner scanner) {
        System.out.println("Enter the allocation matrix:");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                allocation[i][j] = scanner.nextInt();
            }
        }

        System.out.println("Enter the maximum demand matrix:");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                max[i][j] = scanner.nextInt();
                need[i][j] = max[i][j] - allocation[i][j];
            }
        }

        System.out.println("Enter the available resources:");
        for (int i = 0; i < m; i++) {
            available[i] = scanner.nextInt();
        }
    }

    public boolean isSafe() {
        boolean[] finish = new boolean[n];
        int[] work = available.clone();
        boolean canProceed;

        do {
            canProceed = false;
            for (int i = 0; i < n; i++) {
                if (!finish[i]) {
                    boolean canAllocate = true;
                    for (int j = 0; j < m; j++) {
                        if (need[i][j] > work[j]) {
                            canAllocate = false;
                            break;
                        }
                    }
                    if (canAllocate) {
                        for (int j = 0; j < m; j++) {
                            work[j] += allocation[i][j];
                        }
                        finish[i] = true;
                        canProceed = true;
                    }
                }
            }
        } while (canProceed);

        for (boolean f : finish) {
            if (!f) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter number of processes: ");
        int n = scanner.nextInt();

        System.out.print("Enter number of resources: ");
        int m = scanner.nextInt();

        BankersAlgorithm ba = new BankersAlgorithm(n, m);
        ba.inputMatrices(scanner);

        if (ba.isSafe()) {
            System.out.println("The system is in a safe state.");
        } else {
            System.out.println("The system is not in a safe state.");
        }

        scanner.close();
    }
}
